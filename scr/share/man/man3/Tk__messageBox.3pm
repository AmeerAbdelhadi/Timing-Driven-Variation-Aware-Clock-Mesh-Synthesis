.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "messageBox 3"
.TH messageBox 3 "2007-11-17" "perl v5.8.5" "User Contributed Perl Documentation"
.SH "NAME"
messageBox  \-  pop up a message window and wait for user response.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\ \fI$response\fR = \fI$widget\fR\->\fBmessageBox\fR(\fI\-option\fR => \fIvalue\fR, ... );
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This method uses Tk::Dialog to quickly create several
common dialog boxes. A dialog widget consists of a message, an icon
and a set of buttons (see the \fI\-type\fR option). After the message
window is popped up, \fBmessageBox\fR waits for the user to select one of
the buttons and return the button text (note that it's best to check the
returned value in a case insensitive manner). \s-1NOTE:\s0 unlike
\&\fBTk::Dialog\fR which creates its widget once and can be used many
times, the \fBmessageBox\fR window is created every time it's used.
.PP
The following option/value pairs are supported:
.IP "\fB\-default\fR" 4
.IX Item "-default"
The case-sensitive symbolic name of the default button
for this message window  ('Ok',  'Cancel'  and  so
on).  See  \fB\-type\fR  for a list of the symbolic names.
If the message box has  just  one  button  it  will
automatically  be  made  the  default, otherwise if
this option is not specified, there  won't  be  any
default button.
.IP "\fB\-icon\fR" 4
.IX Item "-icon"
Specifies an icon to display. On X11 any of the builtin Tk bitmaps can
specified. On Windows only \fBerror\fR, \fBinfo\fR, \fBquestion\fR or
\&\fBwarning\fR are supported.
.IP "\fB\-message\fR" 4
.IX Item "-message"
Specifies the message to display.
.IP "\fB\-title\fR" 4
.IX Item "-title"
Specifies  a  string to display as the title.
.IP "\fB\-type\fR" 4
.IX Item "-type"
Specifies a predefined set of buttons to be displayed. The following
values are possible: 'AbortRetryIgnore', 'Ok', 'OkCancel',
\&'RetryCancel', 'YesNo' or 'YesNoCancel'.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
\&\fI$response\fR = \fI$mw\fR\->\fBmessageBox\fR(\-icon => 'question', \-message => 'Hello World!', \-title => 'My title', \-type => 'AbortRetryIgnore', \-default => 'Retry');
.SH "AUTHOR"
.IX Header "AUTHOR"
Stephen.O.Lidie@Lehigh.EDU.  98/05/25
