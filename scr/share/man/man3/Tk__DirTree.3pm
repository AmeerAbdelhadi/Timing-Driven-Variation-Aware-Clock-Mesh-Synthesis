.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DirTree 3"
.TH DirTree 3 "2007-11-17" "perl v5.8.5" "User Contributed Perl Documentation"
.SH "NAME"
Tk::DirTree \- Create and manipulate DirTree widgets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\ \fBuse Tk::DirTree;\fR
.PP
\&\ \fI$dirtree\fR = \fI$parent\fR\->\fBDirTree\fR(?\fIoptions\fR?);
.SH "SUPER-CLASS"
.IX Header "SUPER-CLASS"
The \fBDirTree\fR class is derived from the Tree class and inherits
all the methods, options and subwidgets of its super\-class.
.SH "STANDARD OPTIONS"
.IX Header "STANDARD OPTIONS"
\&\fBTree\fR supports all the standard options of a Tree widget.  See
Tk::options for details on the standard options.
.SH "WIDGET-SPECIFIC OPTIONS"
.IX Header "WIDGET-SPECIFIC OPTIONS"
.IP "Name:		\fBbrowseCmd\fR" 4
.IX Item "Name:		browseCmd"
.PD 0
.IP "Class:		\fBBrowseCmd\fR" 4
.IX Item "Class:		BrowseCmd"
.IP "Switch:		\fB\-browsecmd\fR" 4
.IX Item "Switch:		-browsecmd"
.PD
Specifies a callback to call whenever the user browses on a directory
(usually by single-clicking on the name of the directory). The callback
is called with one argument, the complete pathname of the directory.
.IP "Name:		\fBcommand\fR" 4
.IX Item "Name:		command"
.PD 0
.IP "Class:		\fBCommand\fR" 4
.IX Item "Class:		Command"
.IP "Switch:		\fB\-command\fR" 4
.IX Item "Switch:		-command"
.PD
Specifies the callback to be called when the user activates on a directory
(usually by double-clicking on the name of the directory). The callback
is called with one argument, the complete pathname of the directory.
.IP "Name:		\fBdircmd\fR" 4
.IX Item "Name:		dircmd"
.PD 0
.IP "Class:		\fBDirCmd\fR" 4
.IX Item "Class:		DirCmd"
.IP "Switch:		\fB\-dircmd\fR" 4
.IX Item "Switch:		-dircmd"
.PD
Specifies the callback to be called when a directory listing is needed
for a particular directory. If this option is not specified, by
default the DirTree widget will attempt to read the directory as a
Unix directory. On special occasions, the application programmer may
want to supply a special method for reading directories: for example,
when he needs to list remote directories. In this case, the \fB\-dircmd\fR
option can be used. The specified callback accepts two arguments: the
first is the name of the directory to be listed; the second is a
Boolean value indicating whether hidden sub-directories should be
listed. This callback returns a list of names of the sub-directories of
this directory. For example:
.Sp
.Vb 5
\&    sub read_dir {
\&        my( $dir, $showhidden ) = @_;
\&        return( qw/DOS NORTON WINDOWS/ ) if $dir eq "C:\e\e";
\&        return();
\&    }
.Ve
.IP "Name:		\fBshowHidden\fR" 4
.IX Item "Name:		showHidden"
.PD 0
.IP "Class:		\fBShowHidden\fR" 4
.IX Item "Class:		ShowHidden"
.IP "Switch:		\fB\-showhidden\fR" 4
.IX Item "Switch:		-showhidden"
.PD
Specifies whether hidden directories should be shown. By default, a
directory name starting with a period \*(L".\*(R" is considered as a hidden
directory. This rule can be overridden by supplying an alternative
\&\fB\-dircmd\fR option.
.IP "Name:		\fBdirectory\fR" 4
.IX Item "Name:		directory"
.PD 0
.IP "Class:		\fBDirectory\fR" 4
.IX Item "Class:		Directory"
.IP "Switch:		\fB\-directory\fR" 4
.IX Item "Switch:		-directory"
.IP "Alias:		\fB\-value\fR" 4
.IX Item "Alias:		-value"
.PD
Specifies the name of the current directory to be displayed in the
DirTree widget.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBDirTree\fR constructor method creates a new window (given by the \f(CW$dirtree\fR
argument) and makes it into a DirTree widget.  Additional options,
described above, may be specified on the command line or in the
option database to configure aspects of the DirTree such as its
cursor and relief.  The DirTree widget displays a list view of a
directory, its previous directories and its sub\-directories. The
user can choose one of the directories displayed in the list or
change to another directory.
.SH "WIDGET METHODS"
.IX Header "WIDGET METHODS"
The \fBDirTree\fR method creates a widget object.
This object supports the \fBconfigure\fR and \fBcget\fR methods
described in Tk::options which can be used to enquire and
modify the options described above.
The widget also inherits all the methods provided by the generic
Tk::Widget class.
.PP
The following additional methods are available for DirTree widgets:
.IP "\fI$dirtree\fR\->\fBchdir\fR(\fIdir\fR)" 4
.IX Item "$dirtree->chdir(dir)"
Change the current directory to \fIdir\fR.
.SH "OTHER METHODS"
.IX Header "OTHER METHODS"
These methods have to be documented or made private:
.IP "OpenCmd" 4
.IX Item "OpenCmd"
.PD 0
.IP "Populate" 4
.IX Item "Populate"
.IP "add_to_tree" 4
.IX Item "add_to_tree"
.IP "dirnames" 4
.IX Item "dirnames"
.IP "fullpath" 4
.IX Item "fullpath"
.IP "has_subdir" 4
.IX Item "has_subdir"
.IP "opencmd" 4
.IX Item "opencmd"
.IP "set_dir" 4
.IX Item "set_dir"
.PD
.SH "BINDINGS"
.IX Header "BINDINGS"
The mouse and keyboard bindings of the DirTree widget are the same as
the bindings of the Tree widget.
.SH "KEYWORDS"
.IX Header "KEYWORDS"
directory, tree, tix
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Tk::Tree
Tk::HList
.SH "AUTHOR"
.IX Header "AUTHOR"
Perl/TK version by Chris Dean <ctdean@cogit.com>.  Original Tcl/Tix
version by Ioi Kim Lam.
