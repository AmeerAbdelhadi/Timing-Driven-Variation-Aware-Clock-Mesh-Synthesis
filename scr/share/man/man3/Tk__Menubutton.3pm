.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Menubutton 3"
.TH Menubutton 3 "2007-11-17" "perl v5.8.5" "User Contributed Perl Documentation"
.SH "NAME"
Tk::Menubutton \- Create and manipulate Menubutton widgets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fI$menubutton\fR = \fI$parent\fR\->\fBMenubutton\fR(?\fIoptions\fR?);
.SH "STANDARD OPTIONS"
.IX Header "STANDARD OPTIONS"
\&\fB\-activebackground\fR	\fB\-cursor\fR	\fB\-highlightthickness\fR	\fB\-takefocus\fR
\&\fB\-activeforeground\fR	\fB\-disabledforeground\fR	\fB\-image\fR	\fB\-text\fR
\&\fB\-anchor\fR	\fB\-font\fR	\fB\-justify\fR	\fB\-textvariable\fR
\&\fB\-background\fR	\fB\-foreground\fR	\fB\-padx\fR	\fB\-underline\fR
\&\fB\-bitmap\fR	\fB\-highlightbackground\fR	\fB\-pady\fR	\fB\-wraplength\fR
\&\fB\-borderwidth\fR	\fB\-highlightcolor\fR	\fB\-relief\fR
.PP
See Tk::options for details of the standard options.
.SH "WIDGET-SPECIFIC OPTIONS"
.IX Header "WIDGET-SPECIFIC OPTIONS"
.IP "Command-Line Name: \fB\-compound\fR" 4
.IX Item "Command-Line Name: -compound"
.PD 0
.IP "Database Name:  \fBcompound\fR" 4
.IX Item "Database Name:  compound"
.IP "Database Class: \fBCompound\fR" 4
.IX Item "Database Class: Compound"
.PD
Specifies whether the button should display both an image and text,
and if so, where the image should be placed relative to the text.
Valid values for this option are \fBbottom\fR, \fBcenter\fR, \fBleft\fR,
\&\fBnone\fR, \fBright\fR and \fBtop\fR.  The default value is \fBnone\fR, meaning
that the button will display either an image or text, depending on the
values of the \-image and \-bitmap options.
.IP "Name:	\fBdirection\fR" 4
.IX Item "Name:	direction"
.PD 0
.IP "Class:	\fBHeight\fR" 4
.IX Item "Class:	Height"
.IP "Switch:	\fB\-direction\fR" 4
.IX Item "Switch:	-direction"
.PD
Specifies where the menu is going to be popup up. \fBabove\fR tries to
pop the menu above the menubutton. \fBbelow\fR tries to pop the menu
below the menubutton. \fBleft\fR tries to pop the menu to the left of
the menubutton. \fBright\fR tries to pop the menu to the right of the
menu button. \fBflush\fR pops the menu directly over the menubutton.
.IP "Name:	\fBheight\fR" 4
.IX Item "Name:	height"
.PD 0
.IP "Class:	\fBHeight\fR" 4
.IX Item "Class:	Height"
.IP "Switch:	\fB\-height\fR" 4
.IX Item "Switch:	-height"
.PD
Specifies a desired height for the menubutton.
If an image or bitmap is being displayed in the menubutton then the value is in
screen units (i.e. any of the forms acceptable to \fBTk_GetPixels\fR);
for text it is in lines of text.
If this option isn't specified, the menubutton's desired height is computed
from the size of the image or bitmap or text being displayed in it.
.IP "Name:	\fBindicatorOn\fR" 4
.IX Item "Name:	indicatorOn"
.PD 0
.IP "Class:	\fBIndicatorOn\fR" 4
.IX Item "Class:	IndicatorOn"
.IP "Switch:	\fB\-indicatoron\fR" 4
.IX Item "Switch:	-indicatoron"
.PD
The value must be a proper boolean value.  If it is true then
a small indicator rectangle will be displayed on the right side
of the menubutton and the default menu bindings will treat this
as an option menubutton.  If false then no indicator will be
displayed.
.IP "Name:	\fBmenu\fR" 4
.IX Item "Name:	menu"
.PD 0
.IP "Class:	\fBMenuName\fR" 4
.IX Item "Class:	MenuName"
.IP "Switch:	\fB\-menu\fR" 4
.IX Item "Switch:	-menu"
.PD
Specifies the path name of the menu associated with this menubutton.
The menu must be a child of the menubutton.
.IP "Name:	\fBstate\fR" 4
.IX Item "Name:	state"
.PD 0
.IP "Class:	\fBState\fR" 4
.IX Item "Class:	State"
.IP "Switch:	\fB\-state\fR" 4
.IX Item "Switch:	-state"
.PD
Specifies one of three states for the menubutton:  \fBnormal\fR, \fBactive\fR,
or \fBdisabled\fR.  In normal state the menubutton is displayed using the
\&\fBforeground\fR and \fBbackground\fR options.  The active state is
typically used when the pointer is over the menubutton.  In active state
the menubutton is displayed using the \fBactiveForeground\fR and
\&\fBactiveBackground\fR options.  Disabled state means that the menubutton
should be insensitive:  the default bindings will refuse to activate
the widget and will ignore mouse button presses.
In this state the \fBdisabledForeground\fR and
\&\fBbackground\fR options determine how the button is displayed.
.IP "Name:	\fBwidth\fR" 4
.IX Item "Name:	width"
.PD 0
.IP "Class:	\fBWidth\fR" 4
.IX Item "Class:	Width"
.IP "Switch:	\fB\-width\fR" 4
.IX Item "Switch:	-width"
.PD
Specifies a desired width for the menubutton.
If an image or bitmap is being displayed in the menubutton then the value is in
screen units (i.e. any of the forms acceptable to \fBTk_GetPixels\fR);
for text it is in characters.
If this option isn't specified, the menubutton's desired width is computed
from the size of the image or bitmap or text being displayed in it.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBMenubutton\fR method creates a new window (given by the
\&\f(CW$widget\fR argument) and makes it into a menubutton widget.
Additional
options, described above, may be specified on the command line
or in the option database
to configure aspects of the menubutton such as its colors, font,
text, and initial relief.  The \fBmenubutton\fR command returns its
\&\f(CW$widget\fR argument.  At the time this command is invoked,
there must not exist a window named \f(CW$widget\fR, but
\&\f(CW$widget\fR's parent must exist.
.PP
A menubutton is a widget that displays a textual string, bitmap, or image
and is associated with a menu widget.
If text is displayed, it must all be in a single font, but it
can occupy multiple lines on the screen (if it contains newlines
or if wrapping occurs because of the \fBwrapLength\fR option) and
one of the characters may optionally be underlined using the
\&\fBunderline\fR option.  In normal usage, pressing
mouse button 1 over the menubutton causes the associated menu to
be posted just underneath the menubutton.  If the mouse is moved over
the menu before releasing the mouse button, the button release
causes the underlying menu entry to be invoked.  When the button
is released, the menu is unposted.
.PP
Menubuttons are typically organized into groups called menu bars
that allow scanning:
if the mouse button is pressed over one menubutton (causing it
to post its menu) and the mouse is moved over another menubutton
in the same menu bar without releasing the mouse button, then the
menu of the first menubutton is unposted and the menu of the
new menubutton is posted instead.
.PP
There are several interactions between menubuttons and menus;  see
the \fBmenu\fR manual entry for information on various menu configurations,
such as pulldown menus and option menus.
.SH "WIDGET METHODS"
.IX Header "WIDGET METHODS"
The \fBMenubutton\fR method creates a widget object.
This object supports the \fBconfigure\fR and \fBcget\fR methods
described in Tk::options which can be used to enquire and
modify the options described above.
The \fBmenu\fR method returns the menu associated with the widget.
The widget also inherits all the methods provided by the generic
Tk::Widget class.
.SH "DEFAULT BINDINGS"
.IX Header "DEFAULT BINDINGS"
Tk automatically creates class bindings for menubuttons that give them
the following default behavior:
.IP "[1]" 4
.IX Item "[1]"
A menubutton activates whenever the mouse passes over it and deactivates
whenever the mouse leaves it.
.IP "[2]" 4
.IX Item "[2]"
Pressing mouse button 1 over a menubutton posts the menubutton:
its relief changes to raised and its associated menu is posted
under the menubutton.  If the mouse is dragged down into the menu
with the button still down, and if the mouse button is then
released over an entry in the menu, the menubutton is unposted
and the menu entry is invoked.
.IP "[3]" 4
.IX Item "[3]"
If button 1 is pressed over a menubutton and then released over that
menubutton, the menubutton stays posted: you can still move the mouse
over the menu and click button 1 on an entry to invoke it.
Once a menu entry has been invoked, the menubutton unposts itself.
.IP "[4]" 4
.IX Item "[4]"
If button 1 is pressed over a menubutton and then dragged over some
other menubutton, the original menubutton unposts itself and the
new menubutton posts.
.IP "[5]" 4
.IX Item "[5]"
If button 1 is pressed over a menubutton and released outside
any menubutton or menu, the menubutton unposts without invoking
any menu entry.
.IP "[6]" 4
.IX Item "[6]"
When a menubutton is posted, its associated menu claims the input
focus to allow keyboard traversal of the menu and its submenus.
See the \fBmenu\fR documentation for details on these bindings.
.IP "[7]" 4
.IX Item "[7]"
If the \fBunderline\fR option has been specified for a menubutton
then keyboard traversal may be used to post the menubutton:
Alt+\fIx\fR, where \fIx\fR is the underlined character (or its
lower-case or upper-case equivalent), may be typed in any window
under the menubutton's toplevel to post the menubutton.
.IP "[8]" 4
.IX Item "[8]"
The F10 key may be typed in any window to post the first menubutton
under its toplevel window that isn't disabled.
.IP "[9]" 4
.IX Item "[9]"
If a menubutton has the input focus, the space and return keys
post the menubutton.
.Sp
If the menubutton's state is \fBdisabled\fR then none of the above
actions occur:  the menubutton is completely non\-responsive.
.Sp
The behavior of menubuttons can be changed by defining new bindings for
individual widgets or by redefining the class bindings.
.SH "KEYWORDS"
.IX Header "KEYWORDS"
menubutton, widget
