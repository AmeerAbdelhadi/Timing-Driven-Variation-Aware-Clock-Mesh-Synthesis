.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TList 3"
.TH TList 3 "2007-11-17" "perl v5.8.5" "User Contributed Perl Documentation"
.SH "NAME"
Tk::TList \- Create and manipulate Tix Tabular List widgets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\ \fI$tlist\fR = \fI$parent\fR\->\fBTList\fR(?\fIoptions\fR?);
.SH "SUPER-CLASS"
.IX Header "SUPER-CLASS"
None.
.SH "STANDARD OPTIONS"
.IX Header "STANDARD OPTIONS"
\&\fB\-background\fR	\fB\-borderwidth\fR	\fB\-class\fR	\fB\-cursor\fR	\fB\-foreground\fR
\&\fB\-font\fR	\fB\-height\fR	\fB\-highlightcolor\fR	\fB\-highlightthickness\fR
\&\fB\-relief\fR	\fB\-selectbackground\fR	\fB\-selectforeground\fR
\&\fB\-xscrollcommand\fR	\fB\-yscrollcommand\fR	\fB\-width\fR
.PP
See Tk::options for details of the standard options.
.SH "WIDGET-SPECIFIC OPTIONS"
.IX Header "WIDGET-SPECIFIC OPTIONS"
.IP "Name:	\fBbrowsecmd\fR" 4
.IX Item "Name:	browsecmd"
.PD 0
.IP "Class:	\fBBrowseCmd\fR" 4
.IX Item "Class:	BrowseCmd"
.IP "Switch:	\fB\-browsecmd\fR" 4
.IX Item "Switch:	-browsecmd"
.PD
Specifies a perl/Tk \fBcallback\fR to be executed when the user browses through the
entries in the TList widget.
.IP "Name:	\fBcommand\fR" 4
.IX Item "Name:	command"
.PD 0
.IP "Class:	\fBCommand\fR" 4
.IX Item "Class:	Command"
.IP "Switch:	\fB\-command\fR" 4
.IX Item "Switch:	-command"
.PD
Specifies the perl/Tk \fBcallback\fR to be executed when the user invokes a list
entry in the TList widget. Normally the user invokes a list
entry by double-clicking it or pressing the Return key.
.IP "Name:	\fBforeground\fR" 4
.IX Item "Name:	foreground"
.PD 0
.IP "Class:	\fBForeground\fR" 4
.IX Item "Class:	Foreground"
.IP "Switch:	\fB\-foreground\fR" 4
.IX Item "Switch:	-foreground"
.IP "Alias:	\fB\-fg\fR" 4
.IX Item "Alias:	-fg"
.PD
Specifies the default foreground color for the list entries.
.IP "Name:	\fBheight\fR" 4
.IX Item "Name:	height"
.PD 0
.IP "Class:	\fBHeight\fR" 4
.IX Item "Class:	Height"
.IP "Switch:	\fB\-height\fR" 4
.IX Item "Switch:	-height"
.PD
Specifies the desired height for the window in number of characters.
.IP "Name:	\fBitemType\fR" 4
.IX Item "Name:	itemType"
.PD 0
.IP "Class:	\fBItemType\fR" 4
.IX Item "Class:	ItemType"
.IP "Switch:	\fB\-itemtype\fR" 4
.IX Item "Switch:	-itemtype"
.PD
Specifies the default type of display item for this TList widget. When
you call the \fBinsert\fR methods, display items of this
type will be created if the \fB\-itemtype\fR option is not specified.
.IP "Name:	\fBorient\fR" 4
.IX Item "Name:	orient"
.PD 0
.IP "Class:	\fBOrient\fR" 4
.IX Item "Class:	Orient"
.IP "Switch:	\fB\-orient\fR" 4
.IX Item "Switch:	-orient"
.PD
Specifies the order of tabularizing the list entries. When set to
"\fBvertical\fR\*(L", the entries are arranged in a column, from top to
bottom. If the entries cannot be contained in one column, the
remaining entries will go to the next column, and so on. When set to
\&\*(R"\fBhorizontal\fR", the entries are arranged in a row, from left to
right. If the entries cannot be contained in one row, the remaining
entries will go to the next row, and so on.
.IP "Name:	\fBpadX\fR" 4
.IX Item "Name:	padX"
.PD 0
.IP "Class:	\fBPad\fR" 4
.IX Item "Class:	Pad"
.IP "Switch:	\fB\-padx\fR" 4
.IX Item "Switch:	-padx"
.PD
The default horizontal padding for list entries.
.IP "Name:	\fBpadY\fR" 4
.IX Item "Name:	padY"
.PD 0
.IP "Class:	\fBPad\fR" 4
.IX Item "Class:	Pad"
.IP "Switch:	\fB\-padx\fR" 4
.IX Item "Switch:	-padx"
.PD
The default vertical padding for list entries.
.IP "Name:	\fBselectBackground\fR" 4
.IX Item "Name:	selectBackground"
.PD 0
.IP "Class:	\fBSelectBackground\fR" 4
.IX Item "Class:	SelectBackground"
.IP "Switch:	\fB\-selectbackground\fR" 4
.IX Item "Switch:	-selectbackground"
.PD
Specifies the background color for the selected list entries.
.IP "Name:	\fBselectBorderWidth\fR" 4
.IX Item "Name:	selectBorderWidth"
.PD 0
.IP "Class:	\fBBorderWidth\fR" 4
.IX Item "Class:	BorderWidth"
.IP "Switch:	\fB\-selectborderwidth\fR" 4
.IX Item "Switch:	-selectborderwidth"
.PD
Specifies a non-negative value indicating the width of the 3\-D border
to draw around selected items.  The value may have any of the forms
acceptable to \fBTk_GetPixels\fR.
.IP "Name:	\fBselectForeground\fR" 4
.IX Item "Name:	selectForeground"
.PD 0
.IP "Class:	\fBSelectForeground\fR" 4
.IX Item "Class:	SelectForeground"
.IP "Switch:	\fB\-selectforeground\fR" 4
.IX Item "Switch:	-selectforeground"
.PD
Specifies the foreground color for the selected list entries.
.IP "Name:	\fBselectMode\fR" 4
.IX Item "Name:	selectMode"
.PD 0
.IP "Class:	\fBSelectMode\fR" 4
.IX Item "Class:	SelectMode"
.IP "Switch:	\fB\-selectmode\fR" 4
.IX Item "Switch:	-selectmode"
.PD
Specifies one of several styles for manipulating the selection.  The
value of the option may be arbitrary, but the default bindings expect
it to be either \fBsingle\fR, \fBbrowse\fR, \fBmultiple\fR, or
\&\fBextended\fR; the default value is \fBsingle\fR.
.IP "Name:	\fBsizeCmd\fR" 4
.IX Item "Name:	sizeCmd"
.PD 0
.IP "Class:	\fBSizeCmd\fR" 4
.IX Item "Class:	SizeCmd"
.IP "Switch:	\fB\-sizecmd\fR" 4
.IX Item "Switch:	-sizecmd"
.PD
Specifies a perl/Tk \fBcallback\fR to be called whenever the TList widget
changes its size. This command can be useful to implement \*(L"user scroll
bars when needed\*(R" features.
.IP "Name:	\fBstate\fR" 4
.IX Item "Name:	state"
.PD 0
.IP "Class:	\fBState\fR" 4
.IX Item "Class:	State"
.IP "Switch:	\fB\-state\fR" 4
.IX Item "Switch:	-state"
.PD
Specifies whether the TList command should react to user actions. When
set to "\fBnormal\fR\*(L", the TList reacts to user actions in the normal
way. When set to \*(R"\fBdisabled\fR", the TList can only be scrolled, but
its entries cannot be selected or activated.
.IP "Name:	\fBwidth\fR" 4
.IX Item "Name:	width"
.PD 0
.IP "Class:	\fBWidth\fR" 4
.IX Item "Class:	Width"
.IP "Switch:	\fB\-width\fR" 4
.IX Item "Switch:	-width"
.PD
Specifies the desired width for the window in characters.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBTList\fR method creates a new window (given by the
\&\f(CW$widget\fR argument) and makes it into a TList widget.
Additional options, described above, may be specified on the command
line or in the option database to configure aspects of the
TList widget such as its cursor and relief.
.PP
The TList widget can be used to display data in a tabular format. The
list entries of a TList widget are similar to the entries in the Tk
listbox widget. The main differences are (1) the TList widget can
display the list entries in a two dimensional format and (2) you can
use graphical images as well as multiple colors and fonts for
the list entries.
.PP
Each list entry is identified by an \fBindex\fR, which can be in the
following forms:
.IP "\fInumber\fR" 4
.IX Item "number"
An integer that indicates the position of the entry in the list. 0
means the first position, 1 means the second position, and so on.
.IP "\fBend\fR" 4
.IX Item "end"
Indicates the end of the listbox. For some commands this means just
after the last entry; for other commands it means the last entry.
.IP "\fB@\fR\fIx\fR,\fIy\fR" 4
.IX Item "@x,y"
Indicates the element that covers the point in the listbox window
specified by x and y (in pixel coordinates). If no element covers that
point, then the closest element to that point is used.
.SH "DISPLAY ITEMS"
.IX Header "DISPLAY ITEMS"
Each list entry in an TList widget is associated with a \fBdisplay\fR
item.  The display item determines what visual information should
be displayed for this list entry. Please see Tk::DItem
for a list of all display items.
.PP
When a list entry is created by the \fBinsert\fR command, the type of
its display item is determined by the \fB\-itemtype\fR option passed
to these commands. If the \fB\-itemtype\fR is omitted, then by default
the type specified by this TList widget's \fB\-itemtype\fR option is
used.
.SH "WIDGET METHODS"
.IX Header "WIDGET METHODS"
The \fBTList\fR method creates a widget object.
.PP
This object supports the \fBconfigure\fR and \fBcget\fR methods
described in Tk::options which can be used to enquire and
modify the options described above.
The widget also inherits all the methods provided by the generic
Tk::Widget class.
.PP
The following additional methods are available for TList widgets:
.IP "\fI$tlist\fR\->\fBanchorSet\fR(\fIindex\fR)" 4
.IX Item "$tlist->anchorSet(index)"
Sets the anchor to the list entry identified by \fIindex\fR. The
anchor is the end of the selection that is fixed while dragging out a
selection with the mouse.
.IP "\fI$tlist\fR\->\fBanchorClear\fR" 4
.IX Item "$tlist->anchorClear"
Removes the anchor, if any, from this TList widget. This only removes
the surrounding highlights of the anchor entry and does not affect its
selection status.
.IP "\fI$tlist\fR\->\fBdelete\fR(\fIfrom, \fR?\fIto\fR?)" 4
.IX Item "$tlist->delete(from, ?to?)"
Deletes one or more list entries between the two entries specified by
the indices \fIfrom\fR and \fIto\fR. If \fIto\fR is not specified, deletes
the single entry specified by \fIfrom\fR.
.IP "\fI$tlist\fR\->\fBdragsiteSet\fR(\fIindex\fR)" 4
.IX Item "$tlist->dragsiteSet(index)"
Sets the dragsite to the list entry identified by
\&\fIindex\fR. The dragsite is used to indicate the source of a
drag-and-drop action. Currently drag-and-drop functionality has not
been implemented in Tix yet.
.IP "\fI$tlist\fR\->\fBdragsiteClear\fR" 4
.IX Item "$tlist->dragsiteClear"
Remove the dragsite, if any, from the this TList widget. This only
removes the surrounding highlights of the dragsite entry and does not
affect its selection status.
.IP "\fI$tlist\fR\->\fBdropsiteSet\fR(\fIindex\fR)" 4
.IX Item "$tlist->dropsiteSet(index)"
Sets the dropsite to the list entry identified by \fIindex\fR. The
dropsite is used to indicate the target of a drag-and-drop
action. Currently drag-and-drop functionality has not been implemented
in Tix yet.
.IP "\fI$tlist\fR\->\fBdropsiteClear\fR" 4
.IX Item "$tlist->dropsiteClear"
Remove the dropsite, if any, from the this TList widget. This only
removes the surrounding highlights of the dropsite entry and does not
affect its selection status.
.IP "\fI$tlist\fR\->\fBentrycget\fR(\fIindex, option\fR)" 4
.IX Item "$tlist->entrycget(index, option)"
Returns the current value of the configuration option given by
\&\fIoption\fR for the entry indentfied by \fIindex\fR. \fIOption\fR may
have any of the values accepted by the \fBinsert\fR method.
.IP "\fI$tlist\fR\->\fBentryconfigure\fR(\fIindex, \fR?\fIoption\fR?, \fI?value, option, value, ...\fR?)" 4
.IX Item "$tlist->entryconfigure(index, ?option?, ?value, option, value, ...?)"
Query or modify the configuration options of the list entry identified
by \fIindex\fR. If no \fIoption\fR is specified, returns a list
describing all of the available options for \fIindex\fR (see
\&\fBTk_ConfigureInfo\fR for information on the format of this list). If
\&\fIoption\fR is specified with no \fIvalue\fR, then the method
returns a list describing the one named option (this list will be
identical to the corresponding sublist of the value returned if no
\&\fIoption\fR is specified). If one or more \fIoption-value\fR pairs
are specified, then the command modifies the given option(s) to have
the given value(s); in this case the method returns an empty string.
\&\fIOption\fR may have any of the values accepted by the \fBinsert\fR
method. The exact set of options depends on the
value of the \fB\-itemtype\fR option passed to the the \fBinsert\fR
method when this list entry is created.
.IP "\fI$tlist\fR\->\fBinsert\fR(\fIindex, \fR?\fIoption, value, ...\fR?)" 4
.IX Item "$tlist->insert(index, ?option, value, ...?)"
Creates a new list entry at the position indicated by \fIindex\fR. The
following configuration options can be given to configure the list
entry:
.RS 4
.IP "\fB\-itemtype\fR => \fItype\fR" 8
.IX Item "-itemtype => type"
Specifies the type of display item to be display for the new list
entry. \fItype\fR must be a valid display item type. Currently the
available display item types are \fBimage\fR, \fBimagetext\fR,
\&\fBtext\fR, and \fI$widget\fR. If this option is not specified, then by
default the type specified by this TList widget's \fB\-itemtype\fR
option is used.
.IP "\fB\-state\fR => \fIstate\fR" 8
.IX Item "-state => state"
Specifies whether this entry can be selected or invoked by the user.
Must be either \fBnormal\fR or \fBdisabled\fR.
.IP "\fB\-data\fR => \fIdata\fR" 8
.IX Item "-data => data"
Arbitrary data to be associated with the entry (a perl scalar value).
.RE
.RS 4
.Sp
The \fBinsert\fR method accepts additional configuration options
to configure the display item associated with this list entry. The set
of additional configuration options depends on the type of the display
item given by the \fB\-itemtype\fR option. Please see
Tk::DItem for a list of the configuration options for
each of the display item types.
.RE
.IP "\fI$tlist\fR\->\fBinfo\fR(\fIoption, \fR\fIarg, ...\fR)" 4
.IX Item "$tlist->info(option, arg, ...)"
Query information about the TList widget. \fIoption\fR can be one
of the following:
.RS 4
.IP "\fI$tlist\fR\->\fBinfo\fR(\fBanchor, \fR\fIindex\fR)" 8
.IX Item "$tlist->info(anchor, index)"
Returns the index of the current anchor, if any, of the TList
widget. If the anchor is not set, returns the empty string.
.IP "\fI$tlist\fR\->\fBinfo\fR(\fBdragsite, \fR\fIindex\fR)" 8
.IX Item "$tlist->info(dragsite, index)"
Returns the index of the current dragsite, if any, of the TList
widget. If the dragsite is not set, returns the empty string.
.IP "\fI$tlist\fR\->\fBinfo\fR(\fBdropsite, \fR\fIindex\fR)" 8
.IX Item "$tlist->info(dropsite, index)"
Returns the index of the current dropsite, if any, of the TList
widget. If the dropsite is not set, returns the empty string.
.IP "\fI$tlist\fR\->\fBinfo\fR(\fBselection\fR)" 8
.IX Item "$tlist->info(selection)"
Returns a list of selected elements in the TList widget. If no entries
are selected, returns an empty string.
.RE
.RS 4
.RE
.IP "\fI$tlist\fR\->\fBnearest\fR(\fIx, y\fR)" 4
.IX Item "$tlist->nearest(x, y)"
Given an \fI(x,y)\fR coordinate within the TList window, this command
returns the index of the TList element nearest to that coordinate.
.IP "\fI$tlist\fR\->\fBsee\fR(\fIindex\fR)" 4
.IX Item "$tlist->see(index)"
Adjust the view in the TList so that the entry given by \fIindex\fR is
visible. If the entry is already visible then the command has no
effect; otherwise TList scrolls to bring the element into view at the edge
to which it is nearest.
.IP "\fI$tlist\fR\->\fBselection\fR(\fIoption, \fR\fIarg, ...\fR)" 4
.IX Item "$tlist->selection(option, arg, ...)"
This command is used to adjust the selection within a TList widget. It
has several forms, depending on \fIoption\fR:
.RS 4
.IP "\fI$tlist\fR\->\fBselectionClear\fR(?\fIfrom\fR?, ?\fIto\fR?)" 8
.IX Item "$tlist->selectionClear(?from?, ?to?)"
When no extra arguments are given, deselects all of the list entrie(s)
in this TList widget. When only \fIfrom\fR is given, only the list
entry identified by \fIfrom\fR is deselected. When both \fIfrom\fR and
\&\fIto\fR are given, deselects all of the list entrie(s) between
between \fIfrom\fR and \fIto\fR, inclusive, without affecting the
selection state of entries outside that range.
.IP "\fI$tlist\fR\->\fBselectionIncludes\fR(\fIindex\fR)" 8
.IX Item "$tlist->selectionIncludes(index)"
Returns 1 if the list entry indicated by \fIindex\fR is currently
selected; returns 0 otherwise.
.IP "\fI$tlist\fR\->\fBselectionSet\fR(\fIfrom, \fR?\fIto\fR?)" 8
.IX Item "$tlist->selectionSet(from, ?to?)"
Selects all of the list entrie(s) between between \fIfrom\fR and
\&\fIto\fR, inclusive, without affecting the selection state of entries
outside that range. When only \fIfrom\fR is given, only the list entry
identified by \fIfrom\fR is selected.
.RE
.RS 4
.RE
.IP "\fI$tlist\fR\->\fBxview\fR(\fIargs\fR)" 4
.IX Item "$tlist->xview(args)"
This command is used to query and change the horizontal position of the
information in the widget's window. It can take any of the following
forms:
.RS 4
.IP "\fI$tlist\fR\->\fBxview\fR" 8
.IX Item "$tlist->xview"
Returns a list containing two elements.  Each element is a real
fraction between 0 and 1; together they describe the horizontal span
that is visible in the window.  For example, if the first element is
0.2 and the second element is 0.6, 20% of the TList entry is
off-screen to the left, the middle 40% is visible in the window, and
40% of the entry is off-screen to the right. These are the same values
passed to scrollbars via the \fB\-xscrollcommand\fR option.
.IP "\fI$tlist\fR\->\fBxview\fR(\fIindex\fR)" 8
.IX Item "$tlist->xview(index)"
Adjusts the view in the window so that the list entry identified by
\&\fIindex\fR is aligned to the left edge of the window.
.IP "\fI$tlist\fR\->\fBxviewMoveto\fR(\fIfraction\fR)" 8
.IX Item "$tlist->xviewMoveto(fraction)"
Adjusts the view in the window so that \fIfraction\fR of the total
width of the TList is off-screen to the left. \fIfraction\fR must be
a fraction between 0 and 1.
.IP "\fI$tlist\fR\->\fBxviewScroll\fR(\fInumber, what\fR)" 8
.IX Item "$tlist->xviewScroll(number, what)"
This command shifts the view in the window left or right according to
\&\fInumber\fR and \fIwhat\fR. \fINumber\fR must be an integer.
\&\fIWhat\fR must be either \fBunits\fR or \fBpages\fR or an
abbreviation of one of these. If \fIwhat\fR is \fBunits\fR, the view
adjusts left or right by \fInumber\fR character units (the width of
the \fB0\fR character) on the display; if it is \fBpages\fR then the
view adjusts by \fInumber\fR screenfuls. If \fInumber\fR is negative
then characters farther to the left become visible; if it is positive
then characters farther to the right become visible.
.RE
.RS 4
.RE
.IP "\fI$tlist\fR\->\fByview\fR(\fI?args\fR?)" 4
.IX Item "$tlist->yview(?args?)"
This command is used to query and change the vertical position of the
entries in the widget's window. It can take any of the following forms:
.RS 4
.IP "\fI$tlist\fR\->\fByview\fR" 8
.IX Item "$tlist->yview"
Returns a list containing two elements, both of which are real
fractions between 0 and 1.  The first element gives the position of
the list element at the top of the window, relative to the TList as a
whole (0.5 means it is halfway through the TList, for example).  The
second element gives the position of the list entry just after the
last one in the window, relative to the TList as a whole.  These are
the same values passed to scrollbars via the \fB\-yscrollcommand\fR
option.
.IP "\fI$tlist\fR\->\fByview\fR(\fIindex\fR)" 8
.IX Item "$tlist->yview(index)"
Adjusts the view in the window so that the list entry given by
\&\fIindex\fR is displayed at the top of the window.
.IP "\fI$tlist\fR\->\fByviewMoveto\fR(\fIfraction\fR)" 8
.IX Item "$tlist->yviewMoveto(fraction)"
Adjusts the view in the window so that the list entry given by
\&\fIfraction\fR appears at the top of the window. \fIFraction\fR is a
fraction between 0 and 1; 0 indicates the first entry in the TList,
0.33 indicates the entry one-third the way through the TList, and so
on.
.IP "\fI$tlist\fR\->\fByviewScroll\fR(\fInumber, what\fR)" 8
.IX Item "$tlist->yviewScroll(number, what)"
This command adjust the view in the window up or down according to
\&\fInumber\fR and \fIwhat\fR.  \fINumber\fR must be an integer.
\&\fIWhat\fR must be either \fBunits\fR or \fBpages\fR.  If \fIwhat\fR
is \fBunits\fR, the view adjusts up or down by \fInumber\fR lines; if
it is \fBpages\fR then the view adjusts by \fInumber\fR screenfuls.
If \fInumber\fR is negative then earlier entries become visible; if
it is positive then later entries become visible.
.RE
.RS 4
.RE
.SH "BINDINGS"
.IX Header "BINDINGS"
.IP "[1]" 4
.IX Item "[1]"
If the \fB\-selectmode\fR is \*(L"browse\*(R", when the user drags the mouse
pointer over the list entries, the entry under the pointer will be
highlighted and the \fB\-browsecmd\fR procedure will be called with
one parameter, the index of the highlighted entry. Only one entry
can be highlighted at a time. The \fB\-command\fR procedure will be
called when the user double-clicks on a list entry.
.IP "[2]" 4
.IX Item "[2]"
If the \fB\-selectmode\fR is \*(L"single\*(R", the entries will only be
highlighted by mouse <ButtonRelease\-1> events. When a new list entry
is highlighted, the \fB\-browsecmd\fR procedure will be called with
one parameter indicating the highlighted list entry. The
\&\fB\-command\fR procedure will be called when the user double-clicks
on a list entry.
.IP "[3]" 4
.IX Item "[3]"
If the \fB\-selectmode\fR is \*(L"multiple\*(R", when the user drags the mouse
pointer over the list entries, all the entries under the pointer will
be highlighted. However, only a contiguous region of list entries can
be selected. When the highlighted area is changed, the
\&\fB\-browsecmd\fR procedure will be called with an undefined
parameter. It is the responsibility of the \fB\-browsecmd\fR procedure
to find out the exact highlighted selection in the TList. The
\&\fB\-command\fR procedure will be called when the user double-clicks
on a list entry.
.IP "[4]" 4
.IX Item "[4]"
If the \fB\-selectmode\fR is \*(L"extended\*(R", when the user drags the mouse
pointer over the list entries, all the entries under the pointer will
be highlighted. The user can also make disjointed selections using
<Control\-ButtonPress\-1>. When the highlighted area is changed, the
\&\fB\-browsecmd\fR procedure will be called with an undefined
parameter. It is the responsibility of the \fB\-browsecmd\fR procedure
to find out the exact highlighted selection in the TList. The
\&\fB\-command\fR procedure will be called when the user double-clicks
on a list entry.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
This example demonstrates how to use an TList to store a list of
numbers:
.PP
.Vb 3
\&    use strict;
\&    use Tk ();
\&    use Tk::TList;
.Ve
.PP
.Vb 7
\&    my $mw = Tk::MainWindow->new();
\&    my $image = $mw->Getimage('folder');
\&    my $tlist = $mw->TList(-orient => 'vertical');
\&    for my $text ( qw/one two three four five six seven eight nine/ ) {
\&        $tlist->insert('end',
\&                 -itemtype=>'imagetext', -image=>$image, -text=>$text);
\&    }
.Ve
.PP
.Vb 1
\&    $tlist->pack(-expand=>'yes', -fill=>'both');
.Ve
.PP
.Vb 1
\&    Tk::MainLoop;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Tk::options
Tk::Widget
Tk::DItem
Tk::HList
Tk::TixGrid
.SH "KEYWORDS"
.IX Header "KEYWORDS"
Tix(n), Tabular Listbox, Display Items
