.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BrowseEntry 3"
.TH BrowseEntry 3 "2007-11-17" "perl v5.8.5" "User Contributed Perl Documentation"
.SH "NAME"
Tk::BrowseEntry \- entry widget with popup choices.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Tk::BrowseEntry;
.Ve
.PP
.Vb 6
\&    $b = $frame->BrowseEntry(-label => "Label", -variable => \e$var);
\&    $b->insert("end", "opt1");
\&    $b->insert("end", "opt2");
\&    $b->insert("end", "opt3");
\&    ...
\&    $b->pack;
.Ve
.SH "SUPER-CLASS"
.IX Header "SUPER-CLASS"
The \f(CW\*(C`BrowseEntry\*(C'\fR class is derived from the \f(CW\*(C`Frame\*(C'\fR class and
inherits all the methods, options and subwidgets of its super\-class.
By default, options and methods are delegated to the entry subwidget.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
BrowseEntry is a poor man's ComboBox. It may be considered an
enhanced version of LabEntry which provides a button to popup the
choices of the possible values that the Entry may
take. BrowseEntry supports all the options LabEntry supports
except \fB\-textvariable\fR. This is replaced by \fB\-variable\fR. Other
options that BrowseEntry supports:
.IP "\fB\-arrowimage\fR" 4
.IX Item "-arrowimage"
Specifies the image to be used in the arrow button beside the entry
widget. The default is an downward arrow image in the file cbxarrow.xbm
.IP "\fB\-autolimitheight\fR" 4
.IX Item "-autolimitheight"
If set to a true value, then the height of the listbox will be at most
the number of entries in the list. The overall maximum of
\&\f(CW\*(C`\-listheight\*(C'\fR still applies.
.IP "\fB\-autolistwidth\fR" 4
.IX Item "-autolistwidth"
If set to a true value, then the width of the listbox will match the
width of the largest entry.
.IP "\fB\-browsecmd\fR" 4
.IX Item "-browsecmd"
Specifies a function to call when a selection is made in the
popped up listbox. It is passed the widget and the text of the
entry selected. This function is called after the entry variable
has been assigned the value.
.IP "\fB\-browse2cmd\fR" 4
.IX Item "-browse2cmd"
Like \f(CW\*(C`\-browsecmd\*(C'\fR, but the callback is called with the listbox index
instead of the selected value.
.IP "\fB\-buttontakefocus\fR" 4
.IX Item "-buttontakefocus"
Set the \f(CW\*(C`\-takefocus\*(C'\fR option of the button subwidget.
.IP "\fB\-choices\fR" 4
.IX Item "-choices"
Specifies the list of choices to pop up.  This is a reference to an
array of strings specifying the choices.
.IP "\fB\-colorstate\fR" 4
.IX Item "-colorstate"
The state of the widget is reflected by color. A non-editable entry
widget will get a light gray background, while an editable entry will
be almost white. [This may change]
.IP "\fB\-listcmd\fR" 4
.IX Item "-listcmd"
Specifies the function to call when the button next to the entry
is pressed to popup the choices in the listbox. This is called before
popping up the listbox, so can be used to populate the entries in
the listbox.
.IP "\fB\-listheight\fR" 4
.IX Item "-listheight"
Set the height of the listbox. See also \f(CW\*(C`\-autolimitheight\*(C'\fR.
.IP "\fB\-listwidth\fR" 4
.IX Item "-listwidth"
Specifies the width of the popup listbox.
.IP "\fB\-state\fR" 4
.IX Item "-state"
Specifies one of three states for the widget: normal, readonly, or
disabled.  If the widget is disabled then the value may not be changed
and the arrow button won't activate.  If the widget is readonly, the
entry may not be edited, but it may be changed by choosing a value
from the popup listbox.  normal is the default.
.IP "\fB\-style\fR" 4
.IX Item "-style"
Set the \*(L"style\*(R" of the widget. Permitted values are \f(CW\*(C`MSWin32\*(C'\fR and
\&\f(CW\*(C`unix\*(C'\fR. By default \f(CW\*(C`\-style\*(C'\fR is set to the current platform. Widgets
with the \f(CW\*(C`unix\*(C'\fR style will look like a normal \f(CW\*(C`BrowseEntry\*(C'\fR widget,
whereas with the \f(CW\*(C`MSWin32\*(C'\fR style the arrow will look close to the
Windows' standard combobox widget, while moving the mouse the entries
will be highlighted, and probably includes other changes.
.IP "\fB\-variable\fR" 4
.IX Item "-variable"
Specifies the variable in which the entered value is to be stored.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBinsert(\fR\fIindex\fR, \fIstring\fR\fB)\fR" 4
.IX Item "insert(index, string)"
Inserts the text of \fIstring\fR at the specified \fIindex\fR. This string
then becomes available as one of the choices.
.IP "\fBdelete(\fR\fIindex1\fR, \fIindex2\fR\fB)\fR" 4
.IX Item "delete(index1, index2)"
Deletes items from \fIindex1\fR to \fIindex2\fR.
.IP "\fBget\fR" 4
.IX Item "get"
The get method is delegated to the choices listbox.
.SH "ADVERTISED WIDGETS"
.IX Header "ADVERTISED WIDGETS"
The following widgets are advertised:
.IP "entry" 4
.IX Item "entry"
The entry widget.
.IP "arrow" 4
.IX Item "arrow"
The button with the arrow image.
.IP "choices" 4
.IX Item "choices"
The toplevel widget containing the choice listbox.
.IP "slistbox" 4
.IX Item "slistbox"
The scrolled listbox with the choices.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
To make subclassing easier, the following methods may be overridden to
use other standard widgets in composing the mega widget:
.IP "LabEntryWidget" 4
.IX Item "LabEntryWidget"
A widget class compatible with Tk::LabEntry used for the entry.
.IP "ButtonWidget" 4
.IX Item "ButtonWidget"
A widget class compatible with Tk::Button used for the arrow button.
.IP "ListboxWidget" 4
.IX Item "ListboxWidget"
A widget class compatible with Tk::Listbox used for the choices
listbox.
.PP
For example to use a \f(CW\*(C`NumEntry\*(C'\fR widget (from the Tk-GBARR \s-1CPAN\s0
distribution) instead of the normal \f(CW\*(C`Entry\*(C'\fR widget:
.PP
.Vb 5
\&    package Tk::NumBrowseEntry;
\&    use base qw(Tk::BrowseEntry);
\&    use Tk::NumEntry;
\&    Construct Tk::Widget 'NumBrowseEntry';
\&    sub LabEntryWidget { "NumEntry" }
.Ve
.SH "BUGS"
.IX Header "BUGS"
BrowseEntry should really provide more of the ComboBox options.
.SH "AUTHOR"
.IX Header "AUTHOR"
\&\fBRajappa Iyer\fR rsi@earthling.net
.PP
\&\fBChris Dean\fR ctdean@cogit.com made additions.
.PP
More additions by \fBSlaven Rezic\fR slaven@rezic.de
.PP
This code was inspired by ComboBox.tcl in Tix4.0 by Ioi Lam and
bears more than a passing resemblance to ComboBox code. This may
be distributed under the same conditions as Perl.
