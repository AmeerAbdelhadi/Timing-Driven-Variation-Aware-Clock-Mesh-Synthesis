.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "form 3"
.TH form 3 "2007-11-17" "perl v5.8.5" "User Contributed Perl Documentation"
.SH "NAME"
Tk::form \- Geometry manager based on attachment rules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\ \fI$widget\fR\->\fBform\fR?(\fIargs\fR)?
.PP
\&\ \fI$widget\fR\->\fBform\fR\fIOption\fR?(\fIargs\fR)?
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBform\fR method is used to communicate with the
\&\fBform\fR Geometry Manager, a geometry manager that arranges the
geometry of the children in a parent window according to attachment
rules. The \fBform\fR geometry manager is very flexible and
powerful; it can be used to emulate all the existing features of the
Tk packer and placer geometry managers (see pack,
place).
The \fBform\fR method can have any of several forms,
depending on \fIOption\fR:
.IP "\fI$slave\fR\->\fBform\fR?(\fIoptions\fR)?" 4
.IX Item "$slave->form?(options)?"
Sets or adjusts the attachment values of the slave window
according to the \fI\-option\fR=>\fIvalue\fR argument pairs.
.RS 4
.IP "\fB\-b\fR => \fIattachment\fR" 8
.IX Item "-b => attachment"
Abbreviation for the \fB\-bottom\fR option.
.IP "\fB\-bottom\fR => \fIattachment\fR" 8
.IX Item "-bottom => attachment"
Specifies an attachment for the bottom edge of the slave window. The
attachment must specified according to \*(L"\s-1SPECIFYING\s0 \s-1ATTACHMENTS\s0\*(R" below.
.IP "\fB\-bottomspring\fR => \fIweight\fR" 8
.IX Item "-bottomspring => weight"
Specifies the weight of the spring at the bottom edge of the slave
window. See \*(L"\s-1USING\s0 \s-1SPRINGS\s0\*(R" below.
.IP "\fB\-bp\fR => \fIvalue\fR" 8
.IX Item "-bp => value"
Abbreviation for the \fB\-padbottom\fR option.
.IP "\fB\-bs\fR => \fIweight\fR" 8
.IX Item "-bs => weight"
Abbreviation for the \fB\-bottomspring\fR option.
.IP "\fB\-fill\fR => \fIstyle\fR" 8
.IX Item "-fill => style"
Specifies the fillings when springs are used for this widget. The
value must be \fBx\fR, \fBy\fR, \fBboth\fR or \fBnone\fR.
.IP "\fB\-in\fR => \fI$master\fR" 8
.IX Item "-in => $master"
Places the slave window into the specified \fI$master\fR window. If the slave
was originally in another master window, all attachment values with
respect to the original master window are discarded. Even if the
attachment values are the same as in the original master window, they
need to be specified again.  The \fB\-in\fR flag, when needed, must appear
as the first flag of \fIoptions\fR. Otherwise an error is
generated.
.IP "\fB\-l\fR => \fIattachment\fR" 8
.IX Item "-l => attachment"
Abbreviation for the \fB\-left\fR option.
.IP "\fB\-left\fR => \fIattachment\fR" 8
.IX Item "-left => attachment"
Specifies an attachment for the left edge of the slave window. The
attachment must specified according to \*(L"\s-1SPECIFYING\s0 \s-1ATTACHMENTS\s0\*(R" below.
.IP "\fB\-leftspring\fR => \fIweight\fR" 8
.IX Item "-leftspring => weight"
Specifies the weight of the spring at the left edge of the slave
window. See \*(L"\s-1USING\s0 \s-1SPRINGS\s0\*(R" below.
.IP "\fB\-lp\fR => \fIvalue\fR" 8
.IX Item "-lp => value"
Abbreviation for the \fB\-padleft\fR option.
.IP "\fB\-ls\fR => \fIweight\fR" 8
.IX Item "-ls => weight"
Abbreviation for the \fB\-leftspring\fR option.
.IP "\fB\-padbottom\fR => \fIvalue\fR" 8
.IX Item "-padbottom => value"
Specifies the amount of external padding to leave on the bottom side
of the slave. The \fIvalue\fR may have any of the forms acceptable to
\&\fBTk_GetPixels\fR.
.IP "\fB\-padleft\fR => \fIvalue\fR" 8
.IX Item "-padleft => value"
Specifies the amount of external padding to leave on the left side of
the slave.
.IP "\fB\-padright\fR => \fIvalue\fR" 8
.IX Item "-padright => value"
Specifies the amount of external padding to leave on the right side of
the slave.
.IP "\fB\-padtop\fR => \fIvalue\fR" 8
.IX Item "-padtop => value"
Specifies the amount of external padding to leave on the top side of
the slave.
.IP "\fB\-padx\fR => \fIvalue\fR" 8
.IX Item "-padx => value"
Specifies the amount of external padding to leave on both the left and
the right sides of the slave.
.IP "\fB\-pady\fR => \fIvalue\fR" 8
.IX Item "-pady => value"
Specifies the amount of external padding to leave on both the top and
the bottom sides of the slave.
.IP "\fB\-r\fR => \fIattachment\fR" 8
.IX Item "-r => attachment"
Abbreviation for the \fB\-right\fR option.
.IP "\fB\-right\fR => \fIattachment\fR" 8
.IX Item "-right => attachment"
Specifies an attachment for the right edge of the slave window. The
attachment must specified according to \*(L"\s-1SPECIFYING\s0 \s-1ATTACHMENTS\s0\*(R" below.
.IP "\fB\-rightspring\fR => \fIweight\fR" 8
.IX Item "-rightspring => weight"
Specifies the weight of the spring at the right edge of the slave
window. See \*(L"\s-1USING\s0 \s-1SPRINGS\s0\*(R" below.
.IP "\fB\-rp\fR  => \fIvalue\fR" 8
.IX Item "-rp  => value"
Abbreviation for the \fB\-padright\fR option.
.IP "\fB\-rs\fR => \fIweight\fR" 8
.IX Item "-rs => weight"
Abbreviation for the \fB\-rightspring\fR option.
.IP "\fB\-t\fR => \fIattachment\fR" 8
.IX Item "-t => attachment"
Abbreviation for the \fB\-top\fR option.
.IP "\fB\-top\fR => \fIattachment\fR" 8
.IX Item "-top => attachment"
Specifies an attachment for the top edge of the slave window. The
attachment must specified according to \*(L"\s-1SPECIFYING\s0 \s-1ATTACHMENTS\s0\*(R" below.
.IP "\fB\-topspring\fR => \fIweight\fR" 8
.IX Item "-topspring => weight"
Specifies the weight of the spring at the top edge of the slave
window. See \*(L"\s-1USING\s0 \s-1SPRINGS\s0\*(R" below.
.IP "\fB\-tp\fR => \fIvalue\fR" 8
.IX Item "-tp => value"
Abbreviation for the \fB\-padtop\fR option.
.IP "\fB\-ts\fR => \fIweight\fR" 8
.IX Item "-ts => weight"
Abbreviation for the \fB\-topspring\fR option.
.RE
.RS 4
.RE
.IP "\fI$master\fR\->\fBformCheck\fR" 4
.IX Item "$master->formCheck"
This method checks whether there is circular dependency in the
attachments of the master's slaves (see \*(L"\s-1CIRCULAR\s0 \s-1DEPENDENCY\s0\*(R" below).
It returns the Boolean value \fB\s-1TRUE\s0\fR if it
discover circular dependency and \fB\s-1FALSE\s0\fR otherwise.
.IP "\fI$slave\fR\->\fBformForget\fR" 4
.IX Item "$slave->formForget"
Removes the slave from its master and unmaps its window.
The slave will no longer be managed by form. All attachment values
with respect to its master window are discarded. If another slave
is attached to this slave, then the attachment of the other slave will
be changed to grid attachment based on its geometry.
.IP "\fI$master\fR\->\fBformGrid\fR?(\fIx_size, y_size\fR)?" 4
.IX Item "$master->formGrid?(x_size, y_size)?"
When \fIx_size\fR and \fIy_size\fR are given, this method returns the
number of grids of the \fI$master\fR window in a pair of integers of the form
(\fIx_size, y_size\fR). When both \fIx_size\fR and \fIy_size\fR are
given, this method changes the number of horizontal and vertical
grids on the master window.
.IP "\fI$slave\fR\->\fBformInfo\fR?(\fI\-option)\fR?" 4
.IX Item "$slave->formInfo?(-option)?"
Queries the attachment options of a slave window. \fI\-option\fR can be
any of the options accepted by the \fBform\fR method. If
\&\fI\-option\fR is given, only the value of that option is returned.
Otherwise, this method returns a list whose elements are the current
configuration state of the slave given in the same \fIoption-value\fR form
that might be specified to \fBform\fR. The first two
elements in this list list are "\fB\-in\fR=>\fI$master\fR" where
\&\fI$master\fR is the slave's master window.
.IP "\fI$master\fR\->\fBformSlaves\fR" 4
.IX Item "$master->formSlaves"
Returns a list of all of the slaves for the master window. The order
of the slaves in the list is the same as their order in the packing
order. If master has no slaves then an empty string is returned.
.SH "SPECIFYING ATTACHMENTS"
.IX Header "SPECIFYING ATTACHMENTS"
One can specify an attachment for each side of a slave window managed
by form. An attachment is specified in the the form "\-\fIside\fR =>
[\fIanchor_point\fR, \fIoffset\fR]". \-\fIside\fR can be one of
\&\fB\-top\fR, \fB\-bottom\fR, \fB\-left\fR or \fB\-right\fR.
.PP
\&\fIOffset\fR is given in screen units (i.e. any of the forms
acceptable to \fBTk_GetPixels\fR).  A positive offset indicates
shifting to a position to the right or bottom of an anchor point. A
negative offset indicates shifting to a position to the left or top of
an anchor point.
.PP
\&\fIAnchor_point\fR can be given in one of the
following forms:
.IP "\fBGrid Attachment\fR" 4
.IX Item "Grid Attachment"
The master window is divided into a number of horizontal and vertical
grids. By default the master window is divided into 100x100 grids; the
number of grids can be adjusted by the \fBformGrid\fR method. A
grid attachment anchor point is given by a \fB%\fR sign followed by an
integer value. For example, \fB'%0'\fR specifies the first grid
line (the top or left edge of the master window). \fB'%100'\fR specifies
the last grid line (the bottom or right edge of the master window).
.IP "\fBOpposite Side Attachment\fR" 4
.IX Item "Opposite Side Attachment"
Opposite attachment specifies an anchor point located on the
\&\fBopposite\fR side of another slave widget, which must be managed by
form in the same master window. An opposite attachment anchor point
is given by the name of another widget. For example,
"\fI$b\fR\->\fBform\fR(\fB\-top\fR=>[\fI$a\fR,0])" attaches the top side of the widget \fI$b\fR to the
bottom of the widget \fI$a\fR.
.IP "\fBParallel Side Attachment\fR" 4
.IX Item "Parallel Side Attachment"
Opposite attachment specifies an anchor point located on the
\&\fBsame\fR side of another slave widget, which must be managed by
form in the same master window. An parallel attachment anchor point
is given by the sign \fB&\fR follwed by the name of another widget.
For example, "\fI$b\fR\->\fBform\fR(\fB\-top\fR=>['&',\fI$a\fR,0])" attaches the top side of
the widget \fI$b\fR to the top of the widget \fI$a\fR, making
the top sides of these two widgets at the same vertical position
in their parent window.
.IP "\fBNo Attachment\fR" 4
.IX Item "No Attachment"
Specifies a side of the slave to be attached to nothing, indicated by
the keyword \fBnone\fR. When the \fBnone\fR anchor point is given, the
offset must be zero (or not present).
When a side of a slave is attached to \fB['none', 0]\fR, the position
of this side is calculated by the position of the other side and the
natural size of the slave. For example, if a the left side of a
widget is attached to \fB['%0', 100]\fR, its right side attached to
\&\fB['none', 0]\fR, and the natural size of the widget is \fB50\fR pixels,
the right side of the widget will be positioned at pixel
\&\fB['%0', 149]\fR.
When both \fB\-top\fR and \fB\-bottom\fR are attached to \fBnone\fR,
then by default \fB\-top\fR will be attached to \fB['%0', 0]\fR. When both
\&\fB\-left\fR and \fB\-right\fR are attached to none, then by default
\&\fB\-left\fR will be attached to \fB['%0', 0]\fR.
.PP
Shifting effects can be achieved by specifying a non-zero offset with
an anchor point. In the following example, the top side of
widget \fI\e$b\fR is attached to the bottom of
\&\fI\e$a\fR; hence \fI\e$b\fR
always appears below \fI\e$a\fR.  Also, the left edge of \fI\e$b\fR
is attached to the left side of \fI\e$a\fR with a 10
pixel offest.  Therefore, the left edge of \fI\e$b\fR is always
shifted 10 pixels to the right of \fI\e$a\fR's left edge:
.PP
\&\ \fI$b\fR\->\fBform\fR(\fB\-left\fR=>[\fI$a\fR,10], \fB\-top\fR=>[\fI$a\fR,0]);
.Sh "\s-1ABBREVIATIONS:\s0"
.IX Subsection "ABBREVIATIONS:"
Certain abbreviations can be made on the
attachment specifications: First an offset of zero can be omitted.
Thus, the following two lines are equivalent:
.PP
\&\ \fI$b\fR\->\fBform\fR(\fB\-top\fR=>[\fI$a\fR,0], \fB\-right\fR=>['%100',0]);
.PP
\&\ \fI$b\fR\->\fBform\fR(\fB\-top\fR=>[\fI$a\fR], \fB\-right\fR=>'%100');
.PP
In the second case, when the anchor point is omitted, the offset must
be given. A default anchor point is chosen according to the value of
the offset. If the anchor point is \fB0\fR or positive, the default
anchor point \f(CW%0\fR is used; thus, "\fI$b\fR\->\fBform\fR(\fB\-top\fR=>15)" attaches the top
edge of \fI$b\fR to a position 15 pixels below the top edge of the
master window. If the anchor point is "\fB\-0\fR" or negative, the
default anchor point \fB%100\fR is used; thus, "\fI$a\fR\->\fBform\fR(\fB\-right\fR=>\-2)"
attaches the right edge of \fI\e$a\fR to a position 2 pixels to
the left of the master window's right edge.  An further example
below shows a method with its equivalent abbreviation.
.PP
\&\ \fI$b\fR\->\fBform\fR(\fB\-top\fR=>['%0',10], \fB\-bottom\fR=>['%100',0]);
.PP
\&\ \fI$b\fR\->\fBform\fR(\fB\-top\fR=>10, \fB\-bottom\fR=>\-0);
.SH "USING SPRINGS"
.IX Header "USING SPRINGS"
To be written.
.SH "ALGORITHM OF FORM"
.IX Header "ALGORITHM OF FORM"
\&\fBform\fR starts with any slave in the list of slaves of the master
window. Then it tries to determine the position of each side of the
slave.
.PP
If the attachment of a side of the slave is grid attachment, the
position of the side is readily determined.
.PP
If the attachment of this side is \fBnone\fR, then form tries to
determine the position of the opposite side first, and then use the
position of the opposite side and the natural size of the slave to
determine the position of this side.
.PP
If the attachment is opposite or parallel widget attachments, then
form tries to determine the positions of the other widget first,
and then use the positions of the other widget and the natural size of
the slave determine the position of this side. This recursive
algorithmis carried on until the positions of all slaves are
determined.
.SH "CIRCULAR DEPENDENCY"
.IX Header "CIRCULAR DEPENDENCY"
The algorithm of form will fail if a circular dependency exists in
the attachments of the slaves. For example:
.PP
\&\ \fI$c\fR\->\fBform\fR(\fB\-left\fR=>\fI$b\fR);
.PP
\&\ \fI$b\fR\->\fBform\fR(\fB\-right\fR=>\fI$c\fR);
.PP
In this example, the position of the left side of \fI$b\fR depends on
the right side of \fI$c\fR, which in turn depends on the left side of \fI$b\fR.
.PP
When a circular dependency is discovered during the execution of the
form algorithm, form will generate a background error and the
geometry of the slaves are undefined (and will be arbitrary). Notice
that form only executes the algorithm when the specification of the
slaves' attachments is complete.  Therefore, it allows intermediate
states of circular dependency during the specification of the slaves'
attachments.  Also, unlike the Motif Form manager widget, form
defines circular dependency as
``\fIdependency in the same dimension\fR''.
Therefore, the following code fragment will does not
have circular dependency because the two widgets do not depend on each
other in the same dimension (\fI$b\fR depends \fI$c\fR in the
horizontal dimension and \fI$c\fR depends on \fI$b\fR in the vertical
dimension):
.PP
\&\ \fI$b\fR\->\fBform\fR(\fB\-left\fR=>\fI$c\fR);
.PP
\&\ \fI$c\fR\->\fBform\fR(\fB\-top\fR=>\fI$b\fR);
.SH "BUGS"
.IX Header "BUGS"
Springs have not been fully implemented yet.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Tk::grid
Tk::pack
Tk::place
.SH "KEYWORDS"
.IX Header "KEYWORDS"
geometry manager, form, attachment, spring, propagation, size, pack,
tix, master, slave
