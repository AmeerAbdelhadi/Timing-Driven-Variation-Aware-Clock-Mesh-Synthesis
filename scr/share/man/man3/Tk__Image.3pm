.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Image 3"
.TH Image 3 "2007-11-17" "perl v5.8.5" "User Contributed Perl Documentation"
.SH "NAME"
Tk::Image \- Create and manipulate images
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fI$image\fR = \fI$widget\fR\->\fItype\fR(?\fIarg arg ...\fR?)
.PP
\&\fI$image\fR\->\fImethod\fR(?\fIarg arg ...\fR?)
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBimage\fR constructors and methods are used to create, delete, and query images.
It can take several different forms, depending on the
\&\fItype\fR.
.PP
The constructors require a \fI$widget\fR to invoke them, this is used
to locate a \fBMainWindow\fR. (This is because the underlying Tk code
registers the images in the data structure for the \fBMainWindow\fR.)
.PP
The legal forms are:
.IP "\fI$widget\fR\->\fItype\fR?(?\fIname\fR?,?\fIoption\fR=>\fIvalue ...\fR)?" 4
.IX Item "$widget->type?(?name?,?option=>value ...)?"
Creates a new image and returns an object.
\&\fItype\fR specifies the type of the image, which must be one of
the types currently defined (e.g., \fBBitmap\fR).
\&\fIname\fR specifies the name for the image;  if it is omitted then
Tk picks a name of the form \fBimage\fR\fIx\fR, where \fIx\fR is
an integer.
There may be any number of \fIoption\fR=>\fIvalue\fR pairs,
which provide configuration options for the new image.
The legal set of options is defined separately for each image
type;  see below for details on the options for built-in image types.
If an image already exists by the given name then it is replaced
with the new image and any instances of that image will redisplay
with the new contents.
.IP "\fI$image\fR\->\fBdelete\fR" 4
.IX Item "$image->delete"
Deletes the image \fI$image\fR and returns an empty string.
If there are instances of the image displayed in widgets,
the image won't actually be deleted until all of the instances
are released.
However, the association between the instances and the image
manager will be dropped.
Existing instances will retain their sizes but redisplay as
empty areas.
If a deleted image is recreated (with the same \fIname\fR)
the existing instances will use the new image.
.IP "\fI$image\fR\->\fBheight\fR" 4
.IX Item "$image->height"
Returns a decimal string giving the height of image \fIname\fR
in pixels.
.IP "\fI$widget\fR\->\fBimageInuse\fR( 'name' );" 4
.IX Item "$widget->imageInuse( 'name' );"
Returns  a  boolean  value  indicating  whether or not the image
given by \fIname\fR is in use by any widgets.
.IP "\fI$widget\fR\->\fBimageNames\fR" 4
.IX Item "$widget->imageNames"
Returns a list containing all existing images for \fI$widget\fR's
\&\fBMainWindow\fR.
.IP "\fI$image\fR\->\fBtype\fR" 4
.IX Item "$image->type"
Returns the type of  \fI$image\fR (the value of the \fItype\fR
method when the image was created).
.IP "\fI$widget\fR\->\fBimageTypes\fR" 4
.IX Item "$widget->imageTypes"
Returns a list whose elements are all of the valid image types
(i.e., all of the values that may be supplied for the \fItype\fR
to create an image).
.IP "\fI$image\fR\->\fBwidth\fR" 4
.IX Item "$image->width"
Returns a decimal string giving the width of image \fIname\fR
in pixels.
.SH "BUILT-IN IMAGE TYPES"
.IX Header "BUILT-IN IMAGE TYPES"
The following image types are defined by Tk so they will be available
in any Tk application.
Individual applications or extensions may define additional types.
.IP "\fBBitmap\fR" 4
.IX Item "Bitmap"
Each pixel in the image displays a foreground color, a background
color, or nothing.
See Tk::Bitmap for more information.
.IP "\fBPixmap\fR" 4
.IX Item "Pixmap"
\&\fBPixmap\fR is slightly more general than \fBBitmap\fR, each pixel can
be any available color or \*(L"transparent\*(R" (rendered as background color of the
widget image is displayed in). \fBPixmap\fR is best used for icons and other
simple graphics with only a few colors.
.Sp
\&\fBPixmap\fR is derived from Tix. See Tk::Pixmap for more information.
.IP "\fBPhoto\fR" 4
.IX Item "Photo"
Displays a variety of full-color images, using dithering to
approximate colors on displays with limited color capabilities.
See Tk::Photo documentation for more information.
.SH "CAVEATS"
.IX Header "CAVEATS"
It's necessary to use the \*(L"delete\*(R" method to delete an image object
and free memory associated with it. Just using a lexical variable for
storing the image object and letting the variable to go out of scope
or setting to \f(CW\*(C`undef\*(C'\fR is not sufficient.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Tk::Bitmap
Tk::Pixmap
Tk::Photo
.SH "KEYWORDS"
.IX Header "KEYWORDS"
height, image, types of images, width
