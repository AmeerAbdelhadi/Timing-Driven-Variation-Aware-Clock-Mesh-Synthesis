.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "X11Font 3"
.TH X11Font 3 "2007-11-17" "perl v5.8.5" "User Contributed Perl Documentation"
.SH "NAME"
Tk::Font \- a class for finding X Fonts
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Tk::X11Font;
.Ve
.PP
.Vb 4
\& $font = $widget->X11Font(foundry => 'adobe',
\&                       family  => 'times',
\&                       point   => 120
\&                      );
.Ve
.PP
.Vb 1
\& $font = $widget->X11Font('*-courier-medium-r-normal-*-*');
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 2
\&   This module can be use to interrogate the X server what fonts are
\&   avaliable.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .Sh "Foundry( [ $val ] )"
.el .Sh "Foundry( [ \f(CW$val\fP ] )"
.IX Subsection "Foundry( [ $val ] )"
.ie n .Sh "Family( [ $val ] )"
.el .Sh "Family( [ \f(CW$val\fP ] )"
.IX Subsection "Family( [ $val ] )"
.ie n .Sh "Weight( [ $val ] )"
.el .Sh "Weight( [ \f(CW$val\fP ] )"
.IX Subsection "Weight( [ $val ] )"
.ie n .Sh "Slant( [ $val ] )"
.el .Sh "Slant( [ \f(CW$val\fP ] )"
.IX Subsection "Slant( [ $val ] )"
.ie n .Sh "Swidth( [ $val ] )"
.el .Sh "Swidth( [ \f(CW$val\fP ] )"
.IX Subsection "Swidth( [ $val ] )"
.ie n .Sh "Adstyle( [ $val ] )"
.el .Sh "Adstyle( [ \f(CW$val\fP ] )"
.IX Subsection "Adstyle( [ $val ] )"
.ie n .Sh "Pixel( [ $val ] )"
.el .Sh "Pixel( [ \f(CW$val\fP ] )"
.IX Subsection "Pixel( [ $val ] )"
.ie n .Sh "Point( [ $val ] )"
.el .Sh "Point( [ \f(CW$val\fP ] )"
.IX Subsection "Point( [ $val ] )"
.ie n .Sh "Xres( [ $val ] )"
.el .Sh "Xres( [ \f(CW$val\fP ] )"
.IX Subsection "Xres( [ $val ] )"
.ie n .Sh "Yres( [ $val ] )"
.el .Sh "Yres( [ \f(CW$val\fP ] )"
.IX Subsection "Yres( [ $val ] )"
.ie n .Sh "Space( [ $val ] )"
.el .Sh "Space( [ \f(CW$val\fP ] )"
.IX Subsection "Space( [ $val ] )"
.ie n .Sh "Avgwidth( [ $val ] )"
.el .Sh "Avgwidth( [ \f(CW$val\fP ] )"
.IX Subsection "Avgwidth( [ $val ] )"
.ie n .Sh "Registry( [ $val ] )"
.el .Sh "Registry( [ \f(CW$val\fP ] )"
.IX Subsection "Registry( [ $val ] )"
.ie n .Sh "Encoding( [ $val ] )"
.el .Sh "Encoding( [ \f(CW$val\fP ] )"
.IX Subsection "Encoding( [ $val ] )"
Set the given field in the font name to \f(CW$val\fR if given and return the current
or previous value
.ie n .Sh "Name( [ $max ] )"
.el .Sh "Name( [ \f(CW$max\fP ] )"
.IX Subsection "Name( [ $max ] )"
In a list context it returns a list of all font names that match the
fields given. It will return a maximum of \f(CW$max\fR names, or 128 if
\&\f(CW$max\fR is not given.
.PP
In a scalar contex it returns the first matching name or undef
.Sh "Clone( [ key => value, [ ...]] )"
.IX Subsection "Clone( [ key => value, [ ...]] )"
Create a duplicate of the curent font object and modify the given fields
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr <Graham.Barr@tiuk.ti.com>
.SH "HISTORY"
.IX Header "HISTORY"
11\-Jan\-96 Initial version
.PP
08\-Nov\-98 Renamed for Tk800.012
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1995\-1996 Graham Barr. All rights reserved. This program is free
software; you can redistribute it and/or modify it under the same terms
as Perl itself.
