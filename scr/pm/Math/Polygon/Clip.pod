=head1 NAME

Math::Polygon::Clip - frame a polygon in a square

=head1 INHERITANCE

 Math::Polygon::Clip
   is a Exporter

=head1 SYNOPSIS

 my @poly  = ( [1,2], [2,4], [5,7], [1, 2] );
 my @box   = ( $xmin, $ymin, $xmax, $ymax );

 my $boxed = polygon_clip \@box, @poly;

=head1 DESCRIPTION

Cut-off all parts of the polygon which are outside the box

=head1 FUNCTIONS

B<polygon_fill_clip1>(ARRAY-BOX, LIST-OF-POINTS)

=over 4

Clipping a polygon into rectangles can be done in various ways.
With this algorithm (which I designed myself, but may not be new), the
parts of the polygon which are outside the BOX are mapped on the borders.
The polygon stays in one piece.

Returned is one list of points, which is cleaned from double points,
spikes and superfluous intermediate points.

=back

B<polygon_fill_clip2>(ARRAY-BOX, LIST-OF-POINTS)

=over 4

To be implemented.  The polygon falls apart in fragments, which are not
connected: paths which are followed in two directions are removed.
This is required by some applications, like polygons used in geographical
context (country contours and such).

=back

B<polygon_fill_clip3>(ARRAY-BOX, OUT-POLY, [IN-POLYS])

=over 4

To be implemented.  A surrounding polygon, with possible
inclussions.

=back

B<polygon_line_clip>(ARRAY-BOX, LIST-OF-POINTS)

=over 4

Returned is a list of ARRAYS (possibly 0 long) containing line pieces
from the input polygon (or line).

example: 

 my @points = ( [1,2], [2,3], [2,0], [1,-1], [1,2] );
 my @bbox   = ( 0, -2, 2, 2 );
 my @l      = polygon_line_clip \@bbox, @points;
 print scalar @l;      # 1, only one piece found
 my @first = @{$l[0]}; # first is [2,0], [1,-1], [1,2]

=back

=head1 SEE ALSO

This module is part of Math-Polygon distribution version 1.00,
built on February 01, 2008. Website: F<http://perl.overmeer.net/geo/>

=head1 LICENSE

Copyrights 2004,2006-2008 by Mark Overmeer. For other contributors see ChangeLog.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See F<http://www.perl.com/perl/misc/Artistic.html>

